I would like to know how system is design for like amazon order syste, how do they deliver prime order so fast, how the cart is designed ? etc .. where can i find some blogs or good resources for system design like above scenarios ?




I'd start with https://github.com/donnemartin/system-design-primer as it's free, decently comprehensive and links to a lot of additional resources. 
Another well liked resource is https://www.***/courses/***-the-system-design-interview but I never actually used that one myself as it costs money and I question how much it offers beyond the first resource. 
You'll also want to at least read over a few of the newest, hottest trends right now and understand their strengths and weaknesses.

I'd strongly recommend really studying for this as based on your questions, it seems like you don't have a strong foundation in high level system design.
I don't mean that as an insult, but system design skills largely come from experience. How Amazon deliver's prime orders so fast is more about logistics than SD.
The Amazon shopping cart is more low level design (code-centric) than what most people would consider for a system design interview question. I'm not saying you couldn't force those into a traditional SD question but it would be awkward,

System design is an enormous topic and it's all about trade offs.

There aren't a lot of "wrong" answers but there are a lot of valid options each with pros and cons. Understanding these options, what their trade-offs are and when to use what is key to good system design.
Because there is seldom a "right" answer either, you need to be able to justify your choices. Amazon is strongly focused on scalability so keep that in mind.
Remember ALL the parts of a system, even if only mentioning them in passing and asking the interviewer if they want you to go into those. 
For example, most systems will have a user authentication part but often people don't even mention it. 
At Amazon scale, user auth is going to have it own entire space, separated from the other parts of the system. 
It will have it's own app services, 
web server (both for dynamic content and CDN for static), 
load balancers (which kind, at what level and why), 
data stores (which could be SQL or NoSQL and 
you need to know which is better and why), and a host of other potential parts.

For my Amazon SD interview, I was asked to design Amazon Fresh.
It took up an entire whiteboard and even then we intentionally didn't dive into the delivery/employee side. It was almost exclusively focused on the customer side and the B2B integration. 
Even more narrowly we targeted searching, inventory management and content serving all with a heavy emphasis on scalability. 
Remember, Amazon is expecting millions of users spread across the world and you should design for that. 
We went pretty deep into specifics but it was by far my favorite interview of the day.

Now I was going in with 15+ yoe and I wasn't new to SD so YMMV on how deep they expect you to go.
Let the interviewer guide you and when in doubt ask them if they want you to expand on an area (such as how you'd load balance or what messaging system you'd use) instead of volunteering that information
